.. _tut-intro:

******************************
开胃菜
******************************

如果你要用计算机做很多工作, 希望可以自动完成其中的一些任务. 例如, 你可能希望在大量的文本文件中进行查找替换操作, 也许是以复杂的方式重命名并整理大量图片. 可能你想要编写一个小型的定制数据库, 或者一个特殊的图形界面程序, 或者一个小型的游戏. 

如果你是一个专业的开发者, 你可能不得不用到很多的C/C++/Java库工作, 而且编写/编译/测试/重编译周期太长了, 可能你在可能你在给每个库编写对应的测试代码, 但发现这是个烦人的活. 或者你在编写一个程序, 需要用到一门扩展语言, 但是你又不想重新设计和实现一套. 

那么 Python 就是你需要的语言. 

你能够针对一些任务编写 Unix Shell 脚本或者 Windows 批处理文件, 但是脚本语言最擅长移动文件和修改文本数据, 不适合 GUI 程序或游戏. 你能写 C/C++/Java 程序, 但是这些技本就是开发最简单的程序也要用去大量的时间. 无论在 Windows 、MacOS 或 Unix 操作系统上,  Python 非常易于使用, 可以帮助你更快的完成任务. 

虽说 Python 很容易上手, 但它是一门真正的编程语言, 相对于 Shell , 它提供的针对大型程序的支持和结构要多的多. 另一方面, 它提供了比 C 更多的错误检查, 并且, 作为一门 *非常高级的语言* (*very-high-level language*), 它拥有内置的高级数据结构类型, 例如可变数组和字典. 因为拥有更多的通用数据类型,  Python 适合比 Awk 甚至 Perl 更广泛的问题领域, 在其它的很多领域, Python 至少比别的语言要易用的多. 

Python 允许你把自己的程序分隔成不同的模块, 以便在其它的 Python 程序中重用. 它包含一个很大的标准模块集, 你可以把它们作为你自己程序的基础 --- 或者把它们做为开始学习 Python 编程的示例. 其中一些模块中提供了诸如文件 I/O, 系统调用,  sockets 甚至类似 TK 这样的图形接口. 

Python是一门解释型语言, 因为不需要编译和链接的时间, 它可以帮你省下一些开发时间. 解释器可以交互式的使用, 基于语言给定的功能, 你可以写一些实验性质的程序, 扔掉也无所谓. 或者还可以当它是一个随手可得的计算器. 

Python 可以写出很紧凑的, 可读性很强的程序. 用 Python 写的程序通常比同样的 C, C++ 或 Java 程序要短得多, 这是因为以下几个原因: 


* 高级数据结构使你可以在一个单独的语句中表达出很复杂的操作; 

* 语句的组织依赖于缩进而不是 开始/结束（类似 C 族语言的 {} 符号或 Pascal 的begin/end关键字）标记块; 

* 参数或变量不需要声明. 


Python 是可扩展的: 如果你会用 C 写程序, 就可以很容易的为解释器添加新的 built-in 函数或模块, 或者优化性能瓶颈, 使其达到最大速度, 或者使 Python 能够链接到必要的二进制架构（比如某个专用的商业图形库）. 一旦你真正掌握了它, 你可以将 Python 集成进由 C 写成的程序, 把 Python 当做是这个程序的扩展或命令行语言. 

顺便说一下, 这个语言的名字来自于 BBC 的 "Monty Python's Flying Circus" 节目, 和凶猛的爬行类生物没有任何关系. 在文档中引用 Monty Python 的典故不仅可行, 而且值得鼓励！

现在我们已经了解了 Python 中所有激动人心的东西, 大概你想仔细的试试它了. 学习一门语言最好的办法就是使用它, 如你所读到的, 本文会引领你运用 Python 解释器. 

下一节中, 我们直接说明解释器的用法, 这没有什么神秘的内容, 不过有助于我们练习后面展示的例子. 

本指南其它部分通过示例介绍了 Python 语言和系统的各种功能, 开始是简单表达式, 语法和数据类型, 接上来是函数和模块, 最后是诸如异常和自定义类这样的高级内容. 


